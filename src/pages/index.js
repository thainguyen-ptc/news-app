import React, { Fragment } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { connect } from 'react-redux';
import { END } from 'redux-saga';
import InfiniteScroll from 'react-infinite-scroller';
import { isMobileOnly } from 'react-device-detect';

import { StyledContainer } from 'styles/pages/HomePage.style';

import withSSREnvironment from 'hocs/withSSREnvironment';
import MainLayout from 'layouts/MainLayout';
import MainHeader from 'containers/MainHeader';
import NewsFeed from 'components/pages/home-page/NewsFeed/NewsFeed';

import reduxWrapper from 'store';
import { NEWS_SOURCES_ACTIONS } from 'store/actions/newsSourcesAction';
import { ARTICLE_FEEDS_ACTIONS } from 'store/actions/pages/home-page/articleFeedsAction';
import {
  getArticleFeedsData,
  getWhetherArticleFeedsCouldBeLoadedMore,
  getWhetherArticleFeedsLoading
} from 'store/selectors/pages/home-page/articleFeedsSelector';

const MainFooter = () => <>This is a dummy footer</>;
const NewsFeedRenderer = withSSREnvironment(NewsFeed);

function HomePage ({
  isNewsFeedLoading,
  newsFeed,
  couldNewsFeedBeLoadedMore,
  loadMoreNewsFeed
}) {
  const router = useRouter();

  function handleLoadMoreNewsFeed () {
    if (isNewsFeedLoading) {
      return;
    }

    const { sources } = router.query;
    return loadMoreNewsFeed(sources);
  }

  return <>
    <Head>
      <title>NextApp using NewsApi - Home</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <MainLayout header={ MainHeader } footer={ MainFooter }>
      <StyledContainer className="container">
        <section>
          <InfiniteScroll
            className="infinity-feeds-wrapper"
            pageStart={ 1 }
            threshold={ isMobileOnly ? 1200 : 1800 }
            loadMore={ handleLoadMoreNewsFeed }
            hasMore={ couldNewsFeedBeLoadedMore }
            loader={
              <Fragment key={ 0 }>Loading...</Fragment>
            }>
            <NewsFeedRenderer data={ newsFeed } />
          </InfiniteScroll>
        </section>
      </StyledContainer>
    </MainLayout>
  </>;
}

export const getServerSideProps = reduxWrapper.getServerSideProps(store => async context => {
  const { sources } = context.query;
  store.dispatch(ARTICLE_FEEDS_ACTIONS.fetchArticleFeedsData(sources));
  store.dispatch(NEWS_SOURCES_ACTIONS.fetchNewsSourcesData());
  store.dispatch(END);
  await store.sagaTask.toPromise();
});


function mapStateToProps (state) {
  const newsFeed = getArticleFeedsData(state),
    isNewsFeedLoading = getWhetherArticleFeedsLoading(state),
    couldNewsFeedBeLoadedMore = getWhetherArticleFeedsCouldBeLoadedMore(state);

  return { newsFeed, isNewsFeedLoading, couldNewsFeedBeLoadedMore };
}

function mapDispatchToProps (dispatch) {
  const loadMoreNewsFeed = sources =>
    dispatch(ARTICLE_FEEDS_ACTIONS.fetchArticleFeedsData(sources, true));

  return { loadMoreNewsFeed };
}

export default connect(mapStateToProps, mapDispatchToProps)(HomePage);
